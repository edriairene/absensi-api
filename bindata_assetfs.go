// Code generated by go-bindata.
// sources:
// templates/footer.tpl
// templates/header.tpl
// pages/form.html
// pages/login.html
// pages/register.html
// pages/report.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFooterTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x4f\x6f\x9b\x30\x18\x87\xef\xfd\x14\x88\x6b\x55\x3b\x84\x34\x94\x29\x89\xc4\xda\xc0\x1a\x96\x2c\x10\x91\x26\xbd\x19\xcc\x1f\x1b\x8c\x5d\xdb\x30\xd8\xa7\x9f\xb2\x6a\xdb\x29\xd3\xd4\xd3\xfb\xfe\x9e\xd3\xf3\x18\x86\x61\x2c\x20\x26\xfd\xea\x66\xa1\x32\x49\x84\x36\x94\xcc\x96\x66\xa5\xb5\x50\x9f\x20\xcc\x38\xce\x01\x7d\xeb\x72\x39\x82\x8c\x33\xf8\xfe\xde\xd9\x60\x0a\x2c\xa0\x1a\xc2\x00\x23\x2d\xa0\xca\x34\x48\xab\xf3\x52\x12\x3d\x2e\x4d\x55\x21\xfb\x61\x76\x17\x6e\x6c\x3e\x7d\x0a\xf5\x73\xdd\x9f\x9f\x43\x3b\x59\xef\x7e\xb0\xad\x13\x3e\xd6\xb1\x84\x72\xed\xc2\x48\x94\x73\xe4\xbd\x06\x9b\xef\xfe\xd3\xf6\xb8\xf3\x60\x20\x02\xdf\x77\xed\xea\x24\x82\xfb\xb0\xde\x99\x46\x26\xb9\x52\x5c\x92\x92\xb4\x4b\x13\xb5\xbc\x1d\x19\xef\x94\xb9\x5a\xc0\x77\xd7\x6b\xd2\xb8\xa5\x0a\x64\x0d\xef\x70\xd1\x20\x99\xff\x32\x47\x14\x0d\xb0\x21\xa9\x82\x82\x0b\x91\x4b\x40\x15\xb4\x80\x35\x05\x2e\xec\x18\xfe\x0d\xaf\xd7\x78\x62\x97\x96\x95\xfb\xf9\xf6\x6c\x45\xa1\xee\xed\xb8\x75\x5e\x6c\x56\xee\x87\x2a\x71\x43\x78\xc8\x22\xe5\xed\x9d\x2a\x21\xe9\xc9\x76\xa9\x53\xa0\xda\xdf\xab\xba\x3f\x75\xaa\x2f\xd0\x24\x9d\x45\x1f\xae\x61\x68\xc8\x70\x0b\x52\xce\xb5\xd2\x12\x89\xcb\xb8\x04\xfd\x01\x70\x06\x26\x60\x02\xa9\xfa\x8b\xfe\xd1\xb1\x79\x8d\xe7\x07\x91\xd3\x6a\x96\x4c\xa6\xf8\x81\x7e\xd3\xf3\xfe\xeb\xfa\x4b\x91\xc3\x4d\x14\x90\x38\x3e\x44\xd1\x70\x28\xfc\x17\x41\xac\xed\x5b\x77\xc4\xde\x48\x13\x24\xef\x6f\x9d\xf9\xfe\xf8\xc8\xce\xcd\x7f\x75\xc0\x94\xe3\xf1\x72\x2b\xcd\x9a\xd5\xcd\xcf\x00\x00\x00\xff\xff\x83\x7a\x71\x6f\x66\x02\x00\x00")

func templatesFooterTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesFooterTpl,
		"templates/footer.tpl",
	)
}

func templatesFooterTpl() (*asset, error) {
	bytes, err := templatesFooterTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/footer.tpl", size: 614, mode: os.FileMode(420), modTime: time.Unix(1518569119, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xcd\x6e\xdb\x3c\x10\xbc\xe7\x29\xf8\xf1\xa2\xc3\x17\x89\x4a\xed\xb8\x86\x21\xba\xf0\xa1\x0e\x1a\x14\x45\xda\xb8\xb0\xaf\x0c\x45\x49\xeb\xf0\x47\xe5\x6e\x6d\x0b\x41\xde\xbd\xa0\x95\xa4\x39\xf6\xa4\xdd\xd9\x11\x67\x66\xb1\xd5\x7f\x75\xd0\x34\xf4\x86\x75\xe4\xec\xf2\xa2\x4a\x1f\x66\x95\x6f\x25\x37\x9e\x27\xc0\xa8\x7a\x79\xc1\x18\x63\x95\x33\xa4\x98\xee\x54\x44\x43\x92\xff\xdc\xac\xf3\x39\x7f\x3f\xf2\xca\x19\xc9\x0f\x60\x8e\x7d\x88\xc4\x99\x0e\x9e\x8c\x27\xc9\x8f\x50\x53\x27\x6b\x73\x00\x6d\xf2\x73\x73\xc9\xc0\x03\x81\xb2\x39\x6a\x65\x8d\xbc\xba\x64\xd8\x45\xf0\x8f\x39\x85\xbc\x01\x92\x3e\xbc\x3e\x4d\x40\xd6\x2c\x9f\x9e\x58\xb1\x49\x15\x7b\x7e\xae\xc4\x88\x8d\x73\x0b\xfe\x91\x75\xd1\x34\x32\xeb\x88\xfa\x85\x10\x4d\xf0\x84\x45\x1b\x42\x6b\x8d\xea\x01\x0b\x1d\x9c\xd0\x88\x9f\x1a\xe5\xc0\x0e\xf2\xab\xa2\xb0\x98\x96\xe5\xe5\xc7\xb2\xcc\x58\x34\x56\x66\x48\x83\x35\xd8\x19\x43\x19\x4b\xeb\x90\x19\x99\x13\xa5\x9f\xb2\xf7\x32\x89\xcb\xff\x72\xf9\xa8\xcb\x05\x92\x22\xd0\x89\x2e\x9c\x02\x5f\x68\xc4\x57\xfb\xa8\x23\xf4\xc4\x30\x6a\xc9\xc5\x1e\x45\x13\xa2\x2b\xf6\xc8\x47\x19\x7e\x96\xd9\xab\x83\x1a\x79\x7c\x59\x89\xb1\xfa\x07\xd9\x14\x17\x17\x42\x38\x75\xd2\xb5\x2f\x1e\x42\x20\xa4\xa8\xfa\xd4\xa4\xc8\x6f\x80\x98\x16\x65\x51\x9e\xed\xbd\x61\x85\x7b\xf1\xc9\xc0\x93\x69\x23\xd0\x20\x39\x76\x6a\x32\x9f\xe6\x37\xfe\x7a\x32\x9f\x9e\x7e\x7d\xbf\x52\x61\xbb\x5b\xfd\x5f\x5e\xcf\x7f\xec\xee\x4e\x77\xed\xac\x19\xa6\x5f\xb6\x87\xcd\xb7\xae\xfc\xfc\x61\x36\xd9\xb9\xb5\xbe\xb5\xf7\xab\x23\xdc\xb4\xeb\xd5\x56\xd4\x2b\xb8\x9f\xdd\xee\x1c\x67\x3a\x06\xc4\x10\xa1\x05\x2f\xb9\xf2\xc1\x0f\x2e\xfc\x4e\x3b\xa9\xc4\x78\x50\xd5\x43\xa8\x87\x97\x8c\x35\x1c\x98\xb6\x0a\x51\xf2\x74\x32\x0a\xbc\x89\x7c\x79\xf1\x27\x00\x00\xff\xff\x9e\xcc\xc2\x2d\x9c\x02\x00\x00")

func templatesHeaderTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderTpl,
		"templates/header.tpl",
	)
}

func templatesHeaderTpl() (*asset, error) {
	bytes, err := templatesHeaderTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.tpl", size: 668, mode: os.FileMode(420), modTime: time.Unix(1518566572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesFormHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\xcf\x6a\xc3\x30\x0c\xc6\xef\x7d\x0a\xe1\x7b\x1a\x96\x73\x12\x68\x21\x87\x5d\xca\x58\xf6\x02\x4a\xad\x2c\x06\xc7\x36\xb2\xda\xae\x94\xbe\xfb\x58\xfe\xb0\xac\x6b\x07\x3b\xf9\x93\xfc\xf3\x27\x64\xe9\x72\x01\xa1\x3e\x58\x14\x02\x35\xab\x98\x76\x84\x9a\x78\x2d\xc1\x2a\x58\xc3\xf5\xba\xca\xb5\x39\xc2\xde\x62\x8c\x85\xda\x7b\x27\x68\x1c\x71\xd2\xda\x83\xd1\x20\x46\x2c\xa9\x72\x05\x00\x70\x97\x1b\x89\xe4\xc4\x18\x02\xf1\x44\xde\xd2\xec\x4f\x8b\x9b\xdf\x5e\x36\xf9\x88\xc9\x53\x76\xc3\x0c\x5c\x0c\xe8\xca\x0d\x6c\xa1\x86\x0a\x76\x50\xc3\x73\x9e\x0e\xb9\x9f\x76\xa9\x36\xc7\x45\xed\xef\x70\x92\xf3\xf1\x47\xab\xad\xe7\x7e\xee\xb4\xcb\xc0\xe8\x42\x69\x14\x52\x65\x9e\x76\xd9\x94\x6f\x78\x16\x07\x11\xef\x40\xce\x81\x0a\x35\x06\x6a\x78\x32\xea\xc0\x14\xc9\x89\x9a\x6b\x35\xe2\xa0\x11\x97\x04\x36\x3d\xf2\x59\x95\x2f\xaf\x55\x5d\xed\xde\xf2\x74\xe4\xff\x69\x8f\xcd\x5d\x77\x8d\xee\xfd\x6b\x06\x9b\xed\x03\xef\xe9\x17\x1e\x2c\x46\xeb\xbd\x2c\x17\xe3\x33\x00\x00\xff\xff\x14\x0a\x2d\x9a\x40\x02\x00\x00")

func pagesFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesFormHtml,
		"pages/form.html",
	)
}

func pagesFormHtml() (*asset, error) {
	bytes, err := pagesFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/form.html", size: 576, mode: os.FileMode(511), modTime: time.Unix(1518569614, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesLoginHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x6e\xc2\x30\x10\x84\xef\x3c\xc5\xca\xf7\x60\xb5\x5c\x43\xae\x28\x12\x0d\x7d\x05\x17\x6f\x14\x4b\xc6\xb6\x76\x17\xd2\x0a\xf1\xee\x95\x48\x2c\x4c\xfa\x73\xca\xcc\xe4\xd3\xac\x57\x7b\xbd\x82\xe0\x29\x79\x23\x08\x2a\x2b\xd6\x03\x1a\x8b\xb4\x96\xe4\x15\xac\xe1\x76\x5b\xd5\xd6\x5d\xe0\xe8\x0d\xf3\x56\x1d\x63\x10\xe3\x02\x52\xd5\xfb\xb3\xb3\x20\x4e\x3c\xaa\x66\x05\x00\xf0\x2b\x37\x11\xd5\x48\x26\x25\xa4\x99\x5c\xd2\x14\xc7\xe2\xcf\xcf\x2e\x5f\x7d\x72\xf5\xf2\xba\x60\xee\x1c\x27\x13\x9a\x3d\x1c\x60\x07\x2d\x74\xb5\xbe\xfb\xe7\x2a\x6d\xdd\xa5\x98\xfb\xb0\xb3\xcc\x9f\x7f\xd6\xec\x23\x9d\xf2\x96\xc3\xa6\xe9\xda\xb7\x5a\x0f\x9b\x47\xf0\x6e\x98\xc7\x48\xb6\x48\x3f\x28\x8b\xb3\x48\x0c\x20\x5f\x09\xb7\x6a\x32\x0a\x9c\xcd\x3a\x11\x32\x06\x51\x79\xf4\x73\xda\xec\x0f\xbb\xb6\xab\xf5\x94\x16\xd5\xf3\xa3\xff\xb8\x61\x1f\xa3\x94\x37\xfc\x0e\x00\x00\xff\xff\x0b\x42\xa3\x72\xeb\x01\x00\x00")

func pagesLoginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesLoginHtml,
		"pages/login.html",
	)
}

func pagesLoginHtml() (*asset, error) {
	bytes, err := pagesLoginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/login.html", size: 491, mode: os.FileMode(420), modTime: time.Unix(1518566814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesRegisterHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\xca\xc2\x30\x10\x84\xef\x7d\x8a\x21\xf7\xb4\xfc\xff\xb9\xf6\x56\xc4\x6b\xf5\x05\x42\xb3\xc5\x40\x6c\x42\xb2\xb6\x42\xe9\xbb\x0b\xb5\x62\xac\x7a\xda\xd9\xdd\x8f\x19\x98\x69\x02\xd3\xc5\x5b\xc5\x04\xf1\x54\xb1\x38\x93\xd2\x14\x72\xf6\x56\x20\xc7\x3c\x67\xa5\x36\x03\x5a\xab\x62\xdc\x89\xd6\xf5\xac\x4c\x4f\x41\x76\xf6\x6a\x34\xd8\xb0\x25\x51\x65\x00\xf0\x95\x7b\x10\x72\x0c\xca\x7b\x0a\x2b\xb9\xa5\x83\x1b\x93\xcf\xa7\x97\x95\xb7\x28\xff\xfe\x37\xcc\xc2\x45\xaf\xfa\xaa\x41\x8d\x3d\x0e\x38\xe2\x84\x1a\x4d\x59\x2c\xd7\x77\xc3\x42\x9b\x21\x49\x7f\xad\xab\x5c\xc7\x8f\x52\x3a\xe7\x38\x2d\xe5\x1e\x00\x00\xff\xff\xc6\xb7\x52\xcf\x3c\x01\x00\x00")

func pagesRegisterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesRegisterHtml,
		"pages/register.html",
	)
}

func pagesRegisterHtml() (*asset, error) {
	bytes, err := pagesRegisterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/register.html", size: 316, mode: os.FileMode(420), modTime: time.Unix(1518566845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _pagesReportHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\xca\xc2\x30\x10\x84\xef\x7d\x8a\x21\xf7\xb4\xfc\xff\xb9\xf6\xe6\x59\x29\xbe\x40\x68\xb6\x18\x58\x9b\x90\xac\xad\x50\xfa\xee\x42\xad\x58\xab\x9e\x76\x76\xf7\x63\x06\x66\x1c\x21\x74\x09\x6c\x84\xa0\x9e\x2a\x15\x67\x32\x96\x62\x2e\x81\x15\x72\x4c\x53\x56\x5a\xd7\xa3\x61\x93\xd2\x4e\x35\xbe\x13\xe3\x3a\x8a\xba\xe5\xab\xb3\x10\x27\x4c\xaa\xca\x00\xe0\x2b\xf7\x20\xf4\x10\x4d\x08\x14\x17\x72\x4b\x47\x3f\xac\x3e\x9f\x5e\xac\x6f\x49\xff\xfd\x6f\x98\x99\x4b\xc1\x74\x55\x8d\x3d\x8e\x38\xa0\xc6\xa9\x2c\xe6\xcb\xbb\x59\x61\x5d\xbf\x4a\x7e\xad\x8b\x5c\xc6\x8f\x42\x5a\xef\x65\x5d\xc8\x3d\x00\x00\xff\xff\x93\xac\xe1\x9f\x38\x01\x00\x00")

func pagesReportHtmlBytes() ([]byte, error) {
	return bindataRead(
		_pagesReportHtml,
		"pages/report.html",
	)
}

func pagesReportHtml() (*asset, error) {
	bytes, err := pagesReportHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pages/report.html", size: 312, mode: os.FileMode(420), modTime: time.Unix(1518566876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/footer.tpl": templatesFooterTpl,
	"templates/header.tpl": templatesHeaderTpl,
	"pages/form.html": pagesFormHtml,
	"pages/login.html": pagesLoginHtml,
	"pages/register.html": pagesRegisterHtml,
	"pages/report.html": pagesReportHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pages": &bintree{nil, map[string]*bintree{
		"form.html": &bintree{pagesFormHtml, map[string]*bintree{}},
		"login.html": &bintree{pagesLoginHtml, map[string]*bintree{}},
		"register.html": &bintree{pagesRegisterHtml, map[string]*bintree{}},
		"report.html": &bintree{pagesReportHtml, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"footer.tpl": &bintree{templatesFooterTpl, map[string]*bintree{}},
		"header.tpl": &bintree{templatesHeaderTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
